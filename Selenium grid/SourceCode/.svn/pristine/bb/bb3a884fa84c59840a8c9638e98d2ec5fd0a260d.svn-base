package bannerclient;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import common.AbstractTest;
import common.CommonActions;
import common.Constant;
import joomla.BannerClientPage;
import pages.BannerClientManagerPageAction;
import pages.BannerClientPageAction;
import pages.LoginPageAction;

public class JoomlaBannerClient_004 extends AbstractTest {
	WebDriver driver;

	@BeforeClass
	@Parameters({ "browser", "port", "ip" })
	public void SETUP(String browser, String port, String ip) {
		driver = openBrowser(driver, browser, ip, port);
		log.info("Step1: Navigate to the URL: http://ltrc.automationvids.com/administrator/");
		navigateBrowser(driver, url);
		this.browser = browser;
		loginPage = new LoginPageAction(driver);
		bannerClientPage = new BannerClientPageAction(driver);
		bannerClientManagerPage = new BannerClientManagerPageAction(driver);
		Constant.className = this.getClass().getName();
	}

	@Test(description = "Verify that user cannot create a new client without entering the name of the client")
	public void RUN_01_TC_JOOMLA_BANNERS_CLIENTS_014() {
		log.info("Step2: Enter valid username into Username field and valid password into Password field");	
		log.info("Step3: Click on 'Log in' button");
		loginPage.loginToJoomla(driver, username, password);
		
		log.info("Step4: Select Components -> Banners -> Clients");
		bannerClientManagerPage.selectMenuItems3(driver, browser, Constant.MENUITEM_COMPONENTS, Constant.MENUITEM_BANNERS,
				Constant.MENUITEM_CLIENTS);
		
		log.info("Step5: Click 'New' button in the right top corner");
		log.info("Step6: Enter valid Contact Name to Contact Name textbox");
		log.info("Step7: Enter valid Contact Email to Contact Email textbox");
		log.info("Step8: Click 'Save & Close' button");
		bannerClientPage.addNewBannerClient(driver, contactname, contactemail_valid, Constant.BUTTON_SAVEANDCLOSE);
		
		log.info("VP1: The color of Client name textbox changes to red");
		verifyTrue(bannerClientPage.verifyBorderColorBannerClient(driver, BannerClientPage.txtClientName, Constant.COLOR_RED));
		
		log.info("VP2: New client is not created");
		verifyFalse(bannerClientPage.verifyPageDisplayed(driver, Constant.TITLE_BANNER_CLIENT_MANAGER, true));
		bannerClientPage.clickToolbarButton(driver, Constant.BUTTON_CLOSE);
	}

	@Test(description = "Verify that user cannot create a new client after entering invalid email address")
	public void RUN_02_TC_JOOMLA_BANNERS_CLIENTS_015() {
		log.info("Step2: Enter valid username into Username field and valid password into Password field");
		log.info("Step3: Click on 'Log in' button");
		log.info("Step4: Select Components -> Banners -> Clients");
		log.info("Step5: Click 'New' button in the right top corner");
		log.info("Step6: Enter valid Client Name to Client Name textbox");
		log.info("Step7: Enter valid Contact Name to Contact Name textbox");
		log.info("Step8: Enter valid invalid Contact Email to Contact Email textbox");
		log.info("Step9: Click 'Save & Close' button");
		bannerClientPage.addNewBannerClient(driver, clientname, contactname, contactemail_invalid, Constant.BUTTON_SAVEANDCLOSE);
		
		log.info("VP1: The color of Contact Email textbox changes to red");
		verifyTrue(bannerClientPage.verifyBorderColorBannerClient(driver, BannerClientPage.txtContactEmail, Constant.COLOR_RED));
		
		log.info("VP2: New client is not created");
		verifyFalse(bannerClientPage.verifyPageDisplayed(driver, Constant.TITLE_BANNER_CLIENT_MANAGER, true));	
		}
	
	@Test(description = "Verify that user cannot create a new client after entering invalid email address")
	public void RUN_03_TC_JOOMLA_BANNERS_CLIENTS_013() {
		log.info("Step2: Enter valid username into Username field and valid password into Password field");
		log.info("Step3: Click on 'Log in' button");
		log.info("Step4: Select Components -> Banners -> Clients");
		log.info("Step5: Click 'New' button in the right top corner");
		log.info("Step6: Enter valid Client Name to Client Name textbox");
		log.info("Step7: Enter valid Contact Name to Contact Name textbox");
		log.info("Step8: Enter valid Contact Email to Contact Email textbox");
		log.info("Step9: Click 'Save'button");
		bannerClientPage.editBannerClient(driver, clientname, contactname, contactemail_valid, Constant.BUTTON_SAVE);
		
		log.info("VP: A message : 'Client successfully saved' shows and edit client page displays");
		log.info("Step10: Enter valid Client Name to Client Name textbox");
		log.info("Step11: Enter valid Contact Name to Contact Name textbox");
		log.info("Step12: Enter valid Contact Email to Contact Email textbox");
		log.info("Step13: Click 'Save as Copy' button");
		bannerClientPage.editBannerClient(driver, clientname_new, contactname, contactemail_valid, Constant.BUTTON_SAVEASCOPY);
		
		log.info("VP1: A message : 'Client successfully saved' shows");
		verifyTrue(bannerClientPage.verifyMessageDisplayed(driver, expectedMessage_saved));
		bannerClientManagerPage.clickToolbarButton(driver, Constant.BUTTON_CLOSE);
		
		log.info("VP2: A new client is created without replacing the old client");
		verifyTrue(bannerClientManagerPage.verifyBannerClientDisplayed(driver, Constant.SEARCH_STATUS_YES, clientname));
		verifyTrue(bannerClientManagerPage.verifyBannerClientDisplayed(driver, Constant.SEARCH_STATUS_NO, clientname_new));
		
		log.info("post condition 1: Delete BannerClients");
		bannerClientManagerPage.deleteBannerClient(driver, Constant.SEARCH_STATUS_NO, clientname);
		bannerClientManagerPage.deleteBannerClient(driver, Constant.SEARCH_STATUS_NO, clientname_new);
		
		log.info("post condition 2: Log out Joomla");
		bannerClientManagerPage.logoutJoomla(driver);
	}
	
	@AfterClass
	public void TEARDOWN() {
		closeBrowser(driver);
	}

	/* Initialize Objects */

	LoginPageAction loginPage;
	BannerClientPageAction bannerClientPage;
	BannerClientManagerPageAction bannerClientManagerPage;

	/* Class Variables */
	String browser;
	String url = CommonActions.readDataFromXML("url");
	String username = CommonActions.readDataFromXML("user");
	String password = CommonActions.readDataFromXML("pass");
	String clientname = Constant.TEAM_PREFIX + CommonActions.readDataFromJson("JoomlaBannerClient_004", "title")
			+ CommonActions.getDateTime();
	String clientname_new = Constant.TEAM_PREFIX + CommonActions.readDataFromJson("JoomlaBannerClient_004", "title_new") + CommonActions.getDateTime();
	String contactname = CommonActions.readDataFromJson("JoomlaBannerClient_004", "contactname");
	String contactemail_valid = CommonActions.readDataFromJson("JoomlaBannerClient_004", "contactemail_valid");
	String contactemail_invalid = CommonActions.readDataFromJson("JoomlaBannerClient_004", "contactemail_invalid");
	String expectedMessage_saved = CommonActions.readDataFromJson("JoomlaBannerClient_004", "expectedMessage_saved");
}