package pages;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import common.Constant;
import joomla.AbstractPage;
import joomla.WeblinkManagerPage;

public class WeblinkManagerPageAction extends AbstractPageAction {
	WebDriver driver;

	public WeblinkManagerPageAction(WebDriver driver) {
		this.driver = driver;
	}

	/**
	 * 
	 * @param driver
	 * @param typeSort
	 */

	public void sortWeblinkByID(WebDriver driver, String typeSort) {
		String typeSortInDropdownlist = driver.findElement(WeblinkManagerPage.ddlSortWeblinkByID).getText();
		if (typeSortInDropdownlist != typeSort) {
			click(driver, WeblinkManagerPage.btnSortWeblinkByID);
		}
	}

	/**
	 * Select item of the 'Display' dropdown list at the footer section of the
	 * table
	 * 
	 * @param driver
	 * @param numberOfItems
	 */
	public void selectNumberOfWeblinkDisplay(WebDriver driver, String numberOfItems) {
		String currentNumberOfItemDisplay = driver.findElement(WeblinkManagerPage.ddlNumberWeblinkDisplay).getText();
		if (numberOfItems != currentNumberOfItemDisplay) {
			click(driver, WeblinkManagerPage.ddlNumberWeblinkDisplay);
			click(driver, By.xpath(String.format(WeblinkManagerPage.dynamicNumberWeblinkDisplay, numberOfItems)));
		}
	}

	
	/**
	 * 
	 * @param driver
	 * @param title
	 */

	public void selectWeblink(WebDriver driver, String title) {
		dependableWaitForControl(driver, By.xpath(String.format(WeblinkManagerPage.dynamicWeblinkchkRow, title)), Constant.LONG_TIME);
		click(driver, By.xpath(String.format(WeblinkManagerPage.dynamicWeblinkchkRow, title)));
		sleep(1);
	}

	/**
	 * 
	 * @param title
	 */

	public void searchWeblinkByTitle(WebDriver driver, String title) {
		  enterText(driver, WeblinkManagerPage.txtWeblinkSearch, title);
		  click(driver, WeblinkManagerPage.btnWeblinkSearch);
		 }

	/**
	 * 
	 * @param driver
	 * @param title
	 */

	public void openWeblink(WebDriver driver, String title) {
		click(driver, By.linkText(title));
	}
	
	/**
	 * 
	 * @param driver
	 * @param searchStatus
	 * @param title
	 */
	public void deleteWeblink(WebDriver driver, String searchOption, String title) {
		if (searchOption.toLowerCase().equals("yes")) {
			searchWeblinkByTitle(driver, title);
		}
		selectWeblink(driver, title);
		click(driver, AbstractPage.btnTrash);
	}
	
	
	/**
	 * Clear search result of Weblink page
	 * @param driver
	 */
	public void clearWeblinkSearchResult (WebDriver driver){
		click(driver, WeblinkManagerPage.btnRemoveSearchResult);
	}
	
	/**
	 * 
	 * @param driver
	 * @param status
	 * @param category
	 * @param access
	 * @param language
	 * @param tag
	 */
	public void selectWeblinkSearchTools(WebDriver driver, String status, String category, String access, String language, String tag) {
//		clearSearchTools(driver);
		if (status != null) {
			selectDropDownList(driver, WeblinkManagerPage.ddlWeblinkStatus, status, "contains");
		}
		if (category != null) {
			selectDropDownList(driver, AbstractPage.ddlCategory, category, "contains");
		}

		if (access != null) {
			selectDropDownList(driver, AbstractPage.ddlAccess, access, "contains");
		}

		if (language != null) {
			selectDropDownList(driver, AbstractPage.ddlLanguage, language, "contains");
		}

		if (tag != null) {
			selectDropDownList(driver, AbstractPage.ddlTag, tag, "contains");
		}

	}
	/**
	 * Change status icon of weblink in table
	 * 
	 * @param driver
	 * @param title
	 * @param typeOfStatus
	 */

	public void changeWeblinkStatus(WebDriver driver, String title, String typeOfStatus) {
		selectWeblink(driver, title);
		click(driver, By.xpath(String.format(WeblinkManagerPage.dynamiciconWeblinkStatus, title, typeOfStatus)));
	}
	
	/**
	 * Get index of weblink based on its title
	 * @param driver
	 * @param title
	 * @return
	 */

	public int getWeblinkIndexOfTitle(WebDriver driver, String title) {
		int i;
		WebElement table = driver.findElement(AbstractPage.tblTable);
		List<WebElement> rows = table.findElements(AbstractPage.rowsTable);
		int colID = rows.get(2).findElements(By.xpath("td")).size() - 5;
		for (i = 2; i < rows.size() - 1; i++) {
			String getTitle = rows.get(i).findElements(By.xpath("td")).get(colID).getText();
			if (getTitle.contains(title)) {
				break;
			}
		}
		return i;
	}
	
	
	/**
	 * The first item changes its position with the second item after ordering
	 * 
	 * @param driver
	 * @param firstIem
	 * @param secondItem
	 * @return
	 */

	public boolean verifyWeblinkSortInOrdering(WebDriver driver, String firstItem, String secondItem) {
		selectNumberOfWeblinkDisplay(driver, "All");
		int firstIndex = getWeblinkIndexOfTitle(driver, firstItem);
		int secondIndex = getWeblinkIndexOfTitle(driver, secondItem);
		click(driver, WeblinkManagerPage.btnOrdering);
		int firstIndex1 = getWeblinkIndexOfTitle(driver, firstItem);
		int secondIndex1 = getWeblinkIndexOfTitle(driver, secondItem);
		if (firstIndex > secondIndex) {
			if (firstIndex1 < secondIndex1) {
				return true;
			}
			return false;
		}
		if (firstIndex1 > secondIndex1) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * @param driver
	 * @param title
	 * @param checkinstatus
	 * @return
	 */

	public boolean verifyCheckoutIconDisplayed(WebDriver driver, String title) {
		return (isControlDisplayed(driver, By.xpath(String.format(WeblinkManagerPage.dynamicbtnCheckoutStatus, title))));
	}

	/**
	 * Verify items in table are paging correctly
	 * 
	 * @param driver
	 * @param numberOfItems
	 * @return
	 */

	public boolean verifyWeblinkPagingCorrectly(WebDriver driver, String numberOfItems) {
		WebElement table = driver.findElement(AbstractPage.tblTable);
		List<WebElement> rows = table.findElements(AbstractPage.rowsTable);
		int numberOfRows = rows.size() - 2;

		if (numberOfItems != "All") {
			int numberOfItems1 = Integer.parseInt(numberOfItems);
			if (isControlDisplayed(driver, WeblinkManagerPage.btnWeblinkEndPage)) {
				if (numberOfRows != numberOfItems1) {
					return false;
				}
				return true;
			} else if (numberOfItems1 >= numberOfRows) {
				return true;
			}
			return false;
		} else {
			selectNumberOfWeblinkDisplay(driver, "5");
			if (isControlDisplayed(driver, WeblinkManagerPage.btnWeblinkEndPage)) {
				click(driver, WeblinkManagerPage.btnWeblinkEndPage);
				int numberOfPage = Integer
						.parseInt(driver.findElement(WeblinkManagerPage.btnWeblinkNumberEndPage).getText());
				WebElement tableEndPAge = driver.findElement(AbstractPage.tblTable);
				List<WebElement> rowsEndPage = tableEndPAge.findElements(AbstractPage.rowsTable);
				int numberOfItemsInEndPage = rowsEndPage.size() - 2;
				int totalOfItems = 5 * (numberOfPage - 1) + numberOfItemsInEndPage;
				if (totalOfItems != numberOfRows) {
					return false;
				}

				return true;
			}

			else if (numberOfRows <= 5) {
				return true;
			}

			return false;
		}
	}
	
	/**
	 * 
	 * @param driver
	 * @param title
	 * @return
	 */
	public boolean verifyWeblinkDisplayed(WebDriver driver, String title) {
		searchWeblinkByTitle(driver, title);
		return (isControlDisplayed(driver, By.xpath(String.format(WeblinkManagerPage.dynamiclnkWeblink, title))));
		
	}
	
	/**
	 * verify Weblink Displayed
	 * @param driver
	 * @param searchStatus
	 * @param title
	 * @return
	 */
	public boolean verifyWeblinkDisplayed(WebDriver driver, String searchOption, String title) {
		if (searchOption.toLowerCase().equals("yes")) {
			searchWeblinkByTitle(driver, title);
		}
		return (isControlDisplayed(driver, By.xpath(String.format(WeblinkManagerPage.dynamiclnkWeblink, title))));
		
	}
	/**
	 * Verify status icon of of weblink in table
	 * 
	 * @param driver
	 * @param title
	 * @param typeOfStatus
	 * @return
	 */

	public boolean verifyStatusOfWeblink(WebDriver driver, String title, String typeOfStatus) {
		return (isControlDisplayed(driver, By.xpath(String.format(WeblinkManagerPage.dynamiciconWeblinkStatus, title, typeOfStatus))));
	}
	
}
